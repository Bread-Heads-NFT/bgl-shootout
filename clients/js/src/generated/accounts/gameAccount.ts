/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type GameAccount = Account<GameAccountAccountData>;

export type GameAccountAccountData = {
  key: Key;
  bump: number;
  owner: PublicKey;
  mint: PublicKey;
  matchName: string;
  playerWins: number;
  cpuWins: number;
  draws: number;
  numRounds: number;
};

export type GameAccountAccountDataArgs = {
  bump: number;
  owner: PublicKey;
  mint: PublicKey;
  matchName: string;
  playerWins: number;
  cpuWins: number;
  draws: number;
  numRounds: number;
};

export function getGameAccountAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<GameAccountAccountDataArgs, GameAccountAccountData> {
  const s = context.serializer;
  return mapSerializer<GameAccountAccountDataArgs, any, GameAccountAccountData>(
    s.struct<GameAccountAccountData>(
      [
        ['key', getKeySerializer(context)],
        ['bump', s.u8()],
        ['owner', s.publicKey()],
        ['mint', s.publicKey()],
        ['matchName', s.string()],
        ['playerWins', s.u8()],
        ['cpuWins', s.u8()],
        ['draws', s.u8()],
        ['numRounds', s.u8()],
      ],
      { description: 'GameAccountAccountData' }
    ),
    (value) => ({ ...value, key: Key.GameAccount })
  ) as Serializer<GameAccountAccountDataArgs, GameAccountAccountData>;
}

export function deserializeGameAccount(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): GameAccount {
  return deserializeAccount(
    rawAccount,
    getGameAccountAccountDataSerializer(context)
  );
}

export async function fetchGameAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<GameAccount> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'GameAccount');
  return deserializeGameAccount(context, maybeAccount);
}

export async function safeFetchGameAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<GameAccount | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeGameAccount(context, maybeAccount)
    : null;
}

export async function fetchAllGameAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<GameAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GameAccount');
    return deserializeGameAccount(context, maybeAccount);
  });
}

export async function safeFetchAllGameAccount(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<GameAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeGameAccount(context, maybeAccount as RpcAccount)
    );
}

export function getGameAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bglShootout',
    'DUCKdJdA2Hexw9ZS7M5rcDfJneVF3ptQF1NDEJ9RMTbj'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      bump: number;
      owner: PublicKey;
      mint: PublicKey;
      matchName: string;
      playerWins: number;
      cpuWins: number;
      draws: number;
      numRounds: number;
    }>({
      key: [0, getKeySerializer(context)],
      bump: [1, s.u8()],
      owner: [2, s.publicKey()],
      mint: [34, s.publicKey()],
      matchName: [66, s.string()],
      playerWins: [null, s.u8()],
      cpuWins: [null, s.u8()],
      draws: [null, s.u8()],
      numRounds: [null, s.u8()],
    })
    .deserializeUsing<GameAccount>((account) =>
      deserializeGameAccount(context, account)
    )
    .whereField('key', Key.GameAccount);
}

export function findGameAccountPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The name of the match. */
    matchName: string;
    /** The address of the payer and authority. */
    payerAddress: PublicKey;
    /** The mint address of the player. */
    mint: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bglShootout',
    'DUCKdJdA2Hexw9ZS7M5rcDfJneVF3ptQF1NDEJ9RMTbj'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('game'),
    s.string({ size: 'variable' }).serialize(seeds.matchName),
    s.publicKey().serialize(seeds.payerAddress),
    s.publicKey().serialize(seeds.mint),
  ]);
}

export async function fetchGameAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findGameAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<GameAccount> {
  return fetchGameAccount(context, findGameAccountPda(context, seeds), options);
}

export async function safeFetchGameAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  seeds: Parameters<typeof findGameAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<GameAccount | null> {
  return safeFetchGameAccount(
    context,
    findGameAccountPda(context, seeds),
    options
  );
}
